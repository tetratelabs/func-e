// Copyright 2021 Tetrate
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"bytes"
	"fmt"
	"io/fs"
	"os"
	"os/user"
	"path/filepath"
	"regexp"
	"testing"

	"github.com/spf13/cobra"
	"github.com/stretchr/testify/require"

	"github.com/tetratelabs/getenvoy/pkg/cmd"
	"github.com/tetratelabs/getenvoy/pkg/common"
	builtintoolchain "github.com/tetratelabs/getenvoy/pkg/extension/workspace/toolchain/builtin"
)

// FakeDockerDir includes "docker" which only executes the output. This means it doesn't really invoke docker.
//
// TODO: fake via exec.Run in unit tests because it is less complicated and error-prone than faking via shell scripts.
const FakeDockerDir = "../../../extension/workspace/toolchain/builtin/testdata/toolchain"

// NewRootCommand initializes a command with buffers for stdout and stderr.
func NewRootCommand() (c *cobra.Command, stdout, stderr *bytes.Buffer) {
	stdout = new(bytes.Buffer)
	stderr = new(bytes.Buffer)
	c = cmd.NewRoot()
	c.SetOut(stdout)
	c.SetErr(stderr)
	return c, stdout, stderr
}

// OverrideGetCurrentUser sets builtin.GetCurrentUser to return the indicated user.
// The function returned reverts to the original.
func OverrideGetCurrentUser(u *user.User) func() {
	previous := builtintoolchain.GetCurrentUser
	builtintoolchain.GetCurrentUser = func() (*user.User, error) {
		return u, nil
	}
	return func() {
		builtintoolchain.GetCurrentUser = previous
	}
}

// OverrideHomeDir sets common.HomeDir to return the indicated path. The function returned reverts to the original.
func OverrideHomeDir(homeDir string) func() {
	previous := common.HomeDir
	common.HomeDir = homeDir
	return func() {
		common.HomeDir = previous
	}
}

// InitFakeEnvoyHome creates "$envoyHome/bin/envoy", which echos the commandline, output and stderr. It returns the
// path to the fake envoy script.
//
// "$envoyHome/bin/envoy" also copies any contents in current working directory to "$envoyHome/capture" when invoked.
//
// The capture is necessary because "$envoyHome/bin/envoy" is executed from a getenvoy-managed temp directory, deleted
// on exit. This directory defines how envoy would have run, so we need to save off contents in order to verify them.
//
// TODO: fake via exec.Run in unit tests because it is less complicated and error-prone than faking via shell scripts.
func InitFakeEnvoyHome(t *testing.T, envoyHome string) string {
	// Setup $envoyHome/bin and $envoyHome/capture
	_ = os.Mkdir(envoyHome, fs.ModePerm)
	envoyBin := filepath.Join(envoyHome, "bin")
	envoyCapture := filepath.Join(envoyHome, "capture")
	for _, dir := range []string{envoyBin, envoyCapture} {
		err := os.Mkdir(dir, fs.ModePerm)
		require.NoError(t, err, `couldn't create directory: %s`, dir)
	}

	// Create script literal of $envoyHome/bin/envoy which copies the current directory to $envoyCapture when invoked.
	// stdout and stderr are prefixed "envoy " to differentiate them from other command output, namely docker.
	fakeEnvoyScript := fmt.Sprintf(`#!/bin/sh
set -ue
# Copy all files in the cwd to the capture directory.
cp -r . "%s"

# Echo invocation context to stdout and fake stderr to ensure it is not combined into stdout.
echo envoy pwd: $PWD
echo envoy bin: $0
echo envoy args: $@
echo >&2 envoy stderr
`, envoyCapture)

	// Write $envoyHome/bin/envoy and ensure it is executable
	fakeEnvoyPath := filepath.Join(envoyBin, "envoy")
	err := os.WriteFile(fakeEnvoyPath, []byte(fakeEnvoyScript), 0700) // nolint:gosec
	require.NoError(t, err, `couldn't create fake envoy script: %s`, fakeEnvoyPath)
	return fakeEnvoyPath
}

// ParseEnvoyWorkDirectory returns the CWD captured by the script generated by InitFakeEnvoyHome.
func ParseEnvoyWorkDirectory(stdout *bytes.Buffer) string {
	re := regexp.MustCompile(`.*envoy pwd: (.*)\n.*`)
	envoyWd := re.FindStringSubmatch(stdout.String())[1]
	return envoyWd
}
