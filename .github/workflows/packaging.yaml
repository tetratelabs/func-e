# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/packaging.yaml
---
name: "packaging"

on:
  push:  # We run tests on non-tagged pushes to master
    tags: ''
    branches: master
    paths:
      - 'packaging/msi/*'
      - 'packaging/nfpm/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/packaging.yaml'
      - 'Makefile'
      - 'Tools.mk'
  pull_request:  # We also run tests on pull requests targeted at the master branch
    branches: master
    paths:
      - 'packaging/msi/*'
      - 'packaging/nfpm/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/packaging.yaml'
      - 'Makefile'
      - 'Tools.mk'
  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.
  # For example, you can try to build a branch without raising a pull request.
  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  packaging:
    name: "Test packaging build (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        include:
          # ubuntu is missing windows build tools: wixl, msiinfo and osslsigncode
          # See https://github.com/actions/virtual-environments/issues/3857
          - os: ubuntu-20.04  # Hard-coding an LTS means maintenance, but only once each 2 years!
            setup: sudo apt update -qq && sudo apt install -qq -y wixl msitools osslsigncode
          # macos is missing wixl https://github.com/actions/virtual-environments/issues/3857
          - os: macos-latest
            setup: brew install -q msitools osslsigncode
          # wixtoolset isn't in the path https://github.com/wixtoolset/wix3/blob/develop/src/Setup/CoreMsi/Toolset.wxs#L87
          - os: windows-latest
            setup: |
              echo "$WIX\\bin" >> $GITHUB_PATH
              osslsigncode_version=2.2
              gh release download -R mtrojnar/osslsigncode ${osslsigncode_version} -p '*windows.zip'
              unzip -qq *.zip -d ${HOME}/osslsigncode && rm *.zip
              echo "${HOME}\\osslsigncode" >> $GITHUB_PATH

    steps:
      - name: "Setup msitools, wixtoolset, osslsigncode"
        run: ${{ matrix.setup }}
        env:  # `gh` requires auth even on public releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Cache Go"
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          # go.mod for go release version, go.sum for modules used, and Tools.mk for 'go run' tools
          key: test-${{ runner.os }}-go-${{ hashFiles('go.mod', 'go.sum', 'Tools.mk') }}
          restore-keys: test-${{ runner.os }}-go-

      - name: "Build packages (Windows Installer, Debian, RPM)"
        run: make dist

      # This tests the manifest via yamllint because validation via winget requires too much setup.
      # See https://github.com/microsoft/winget-cli/issues/754#issuecomment-896475895
      - name: "Test winget manifest generation"
        run: |
          ./packaging/msi/winget_manifest.sh > Tetrate.func-e.yaml
          yamllint -sd '{extends: default, rules: {line-length: disable}}' Tetrate.func-e.yaml

      # This only checks the installer when built on Windows as it is simpler than switching OS.
      # refreshenv is from choco, and lets you reload ENV variables (used here for PATH).
      - name: "Test Windows Installer (Windows)"
        if: runner.os == 'Windows'
        run: call packaging\msi\verify_msi.cmd
        shell: cmd

      # This only checks installing and uninstalling the Debian package (amd64) when running this job
      # step on Linux (Ubuntu, amd64) as it is more efficient than having a new job definition
      # (which requires to upload and download the built packages as artifacts) and do the
      # verification there.
      - name: "Test installing and uninstalling Debian package (on Ubuntu, amd64)"
        if: runner.os == 'Linux'
        # Running dpkg and apt-get requires "sudo".
        run: sudo packaging/nfpm/verify_deb.sh

      # This only checks installing and uninstalling the RPM package when running this job on Linux,
      # but using container (on CentOS 8 via ghcr.io/tetratelabs/func-e-internal:centos8, x86_64) as
      # it is more efficient than having a new job definition (which requires to upload and download
      # the built packages as artifacts) and do the verification there.
      - name: "Test installing and uninstalling RPM package (on CentOS 8, x86_64 via ghcr.io/tetratelabs/func-e-internal:centos8)"
        if: runner.os == 'Linux'
        uses: docker://ghcr.io/tetratelabs/func-e-internal:centos8
        with:
          # Since we use the root user from within the container process when doing this, we don't
          # require "sudo".
          args: packaging/nfpm/verify_rpm.sh

      # TODO: Verification for installing and uninstalling arm64 Debian and aarch64 RPM packages.
      # Curently it is not attempted since we need to pass the artifacts to Travis CI every time
      # this job is finished.
