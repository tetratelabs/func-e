# yamllint --format github .github/workflows/internal-images.yml
---
name: internal-images

# Refresh the tags once a day
on:
  schedule:
    - cron: "23 3 * * *"
  workflow_dispatch:  # Allows manual refresh

# This builds images and pushes them to ghcr.io/tetratelabs/func-e-internal:$tag
# Using these in tests and as a parent (FROM) avoids docker.io rate-limits particularly on pull requests.
#
# To troubleshoot, run locally with docker and install go directly. Ex:
# ```bash
# $ docker run -ti -v $PWD:/func-e --rm centos:8
# [root@d37da4601545 /]# cd /func-e
# [root@d37da4601545 func-e]# eval "$(curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | GIMME_GO_VERSION=1.17 bash)"
# now execute your setup commands!
# ```
jobs:
  build-and-push-images:
    strategy:
      matrix:
        # Be precise in tag versions to improve reproducibility
        include:
          - dockerfile: |
              FROM centos:8
              RUN yum install -y --quiet make which git gcc && yum clean all
            target_tag: centos8
    runs-on: ubuntu-latest
    steps:
      # Same as doing this locally: echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_TOKEN}" --password-stdin
      - name: Login into GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          # GHCR_TOKEN=<hex token value>
          #   - pushes Docker images to ghcr.io
          #   - create via https://github.com/settings/tokens
          #   - assign via https://github.com/organizations/tetratelabs/settings/secrets/actions
          #   - needs repo:status, public_repo, write:packages, delete:packages
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Write Dockerfile for ${{ matrix.target-tag }}
        run: |
          cat > Dockerfile <<'EOF'
          ${{ matrix.dockerfile }}
          EOF

      - name : Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64 # Build and push for amd64 and arm64 architectures.
          tags:  ghcr.io/${{ github.repository_owner }}/func-e-internal:${{ matrix.target-tag }}

      # We do re-tagging for easier usage when testing using emulation, so we can forcefuly pull
      # arm64 image by directly specifiying the tag without the need of supplying
      # `--platform linux/arm64`. Using `uses: docker://` only allows to override `args`, but not
      # the `--platform` flag.
      # Reference: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-using-the-github-packages-container-registry
      # Related: https://github.com/actions/virtual-environments/issues/1368
      - name : Re-tag for arm64 only
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/arm64 # Build and push for arm64 architecture only.
          tags:  ghcr.io/${{ github.repository_owner }}/func-e-internal:${{ matrix.target-tag }}-arm64
