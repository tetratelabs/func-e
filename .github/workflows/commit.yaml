# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/commit.yaml
---
name: "build"

env:  # As of 2021-08-05 images come with go 1.15 https://github.com/actions/virtual-environments/tree/main/images
  GO_VERSION: "1.17.0"

on:
  push:  # We run tests on non-tagged pushes to master
    tags: ''
    branches: master
    # ignore docs as they are built with Netlify. Ignore travis-related changes, too.
    # func-e.wxs is used for the Windows Installer, so tested with msi.yaml
    paths-ignore:
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
      - '.travis.yml'
      - 'packaging/msi/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
  pull_request:  # We also run tests on pull requests targeted at the master branch.
    branches: master
    paths-ignore:
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
      - '.travis.yml'
      - 'packaging/msi/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.
  # For example, you can try to build a branch without raising a pull request.
  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  test:
    name: "Run unit tests (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90  # instead of 360 by default
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install Go"
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Cache golang"
        uses: actions/cache@v2
        with:
          path: |  # TODO: go build cache if we care, noting it is OS-specific
            ~/go/pkg/mod
          # Makefile contains go run statements which affect the build cache
          key: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('go.sum', 'Makefile') }}
          restore-keys: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: "Cache Envoy binaries"
        uses: actions/cache@v2
        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall
          path: ~/.func-e/versions
          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}
          restore-keys: test-${{ runner.os }}-envoy-

      - name: "Verify clean check-in"
        run: make check

      - name: "Run unit tests"
        run: make test

      - name: "Build the `func-e` binary"
        run: make build

      - name: "Run e2e tests using the `func-e` binary"
        run: make e2e

      - name: "Generate coverage report"  # only once (not per OS)
        if: runner.os == 'Linux'
        run: make coverage

      - name: "Upload coverage report"  # only on master push and only once (not per OS)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)

      - name: "Run unit tests in a different timezone" # https://github.com/tetratelabs/func-e/issues/303.
        if: runner.os == 'Linux'
        run: |
          sudo timedatectl set-timezone America/Phoenix
          make test

  # Github Action Runners doesn't support all operating systems and architectures we need to test.
  # This adds CentOS+amd64 using docker. We use Travis for arm64. See RATIONALE.md
  test-e2e:
    name: "Run e2e tests via containers (${{ matrix.container }})"
    runs-on: ubuntu-latest
    # "When you only specify a container image, you can omit the image keyword."
    # See https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idcontainer
    container: ${{ matrix.container }}
    timeout-minutes: 90  # instead of 360 by default
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:  # only use images from internal-images.yaml. See RATIONALE.md
        container: ["ghcr.io/${{ github.repository_owner }}/func-e-internal:centos8"]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install Go"
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Cache golang"
        uses: actions/cache@v2
        with:
          path: |  # TODO: go build cache if we care, noting it is OS-specific
            ~/go/pkg/mod
          # Makefile contains go run statements which affect the build cache
          key: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('go.sum', 'Makefile') }}
          restore-keys: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: "Cache Envoy binaries"
        uses: actions/cache@v2
        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall
          path: ~/.func-e/versions
          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}
          restore-keys: test-${{ runner.os }}-envoy-

      - name: "Run e2e tests using the `func-e` binary"
        run: make e2e
