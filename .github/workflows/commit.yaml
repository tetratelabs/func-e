# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/commit.yaml
---
name: "build"

# GOROOT_NAME resolves a GOROOT path corresponding to a major Golang release on the current runner.
# Ex. Given GOROOT_NAME=GOROOT_1_17_X64, ${!GOROOT_NAME}=/opt/hostedtoolcache/go/1.17.1/x64
# See https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#environment-variables-2
env:
  GOROOT_NAME: GOROOT_1_17_X64

on:
  push:  # We run tests on non-tagged pushes to master
    tags: ''
    branches: master
    # ignore docs as they are built with Netlify. Ignore travis-related changes, too.
    # func-e.wxs is used for the Windows Installer, so tested with msi.yaml
    paths-ignore:
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
      - '.travis.yml'
      - 'packaging/msi/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
  pull_request:  # We also run tests on pull requests targeted at the master branch.
    branches: master
    paths-ignore:
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
      - '.travis.yml'
      - 'packaging/msi/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.
  # For example, you can try to build a branch without raising a pull request.
  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  test:
    name: "Run unit tests (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90  # instead of 360 by default
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      # This sets the version-specific GOROOT env on macOS until actions/virtual-environments#4156
      #
      # This must happen before interpolating ${!GOROOT_NAME} on macOS
      - name: "Set GOROOT_X64 env (macOS)"
        if: runner.os == 'macOS'
        run: |  # ex GOROOT_1_17_X64 -> 1.17
          go_version=$(echo ${GOROOT_NAME//_/.}| cut -d. -f2,3)
          go_root=$(ls -d /Users/runner/hostedtoolcache/go/${go_version}*/x64|sort -n|tail -1)
          echo "${GOROOT_NAME}=${go_root}" >> $GITHUB_ENV

      - name: "Configure Go"
        run: |  # This exports variables needed to run and cache a GOROOT set with ${!GOROOT_NAME}.
          go_path=${!GOROOT_NAME}/bin
          for var in GOROOT GOCACHE GOMODCACHE; do
            echo ${var}=$(${go_path}/go env ${var}) >> $GITHUB_ENV
          done
          echo ${go_path} >> $GITHUB_PATH

      - name: "Cache Go"
        uses: actions/cache@v2
        with:
          path: |  # Cache downloaded go modules and the build cache (Makefile involves `go run`)
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
          key: test-${{ runner.os }}-${{ env.GOROOT_NAME }}-go-${{ hashFiles('go.sum', 'Makefile') }}
          restore-keys: test-${{ runner.os }}-${{ env.GOROOT_NAME }}-go-

      - name: "Cache Envoy binaries"
        uses: actions/cache@v2
        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall
          path: ~/.func-e/versions
          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}
          restore-keys: test-${{ runner.os }}-envoy-

      - name: "Verify clean check-in"
        run: make check

      - name: "Run unit tests"
        run: make test

      - name: "Build the `func-e` binary"
        run: make build

      - name: "Run e2e tests using the `func-e` binary"
        run: make e2e

      - name: "Run e2e tests using the `func-e` binary (CentOS)"
        if: runner.os == 'Linux'
        run: docker run -v $HOME/.func-e:/root/.func-e -v $PWD:/func-e --rm ${CENTOS_IMAGE} -c "cd /func-e; make -o ${E2E_FUNC_E_PATH} e2e"
        env:  # CENTOS_IMAGE was built by internal-images.yaml; E2E_FUNC_E_PATH was built via `make build`
          CENTOS_IMAGE: ghcr.io/tetratelabs/func-e-internal:centos8
          E2E_FUNC_E_PATH: build/func-e_linux_amd64/func-e

      - name: "Generate coverage report"  # only once (not per OS)
        if: runner.os == 'Linux'
        run: make coverage

      - name: "Upload coverage report"  # only on master push and only once (not per OS)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)

      - name: "Run unit tests in a different timezone"  # https://github.com/tetratelabs/func-e/issues/303.
        if: runner.os == 'Linux'
        run: |
          sudo timedatectl set-timezone America/Phoenix
          make test
