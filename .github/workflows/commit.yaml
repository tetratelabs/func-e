# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/commit.yaml
---
name: "build"

env:
  GO_VERSION: "1.16.6"

on:
  # We run tests on non-tagged pushes to master
  push:
    tags: ''
    branches: master
    paths-ignore:  # ignore docs as they are built with Netlify. Ignore travis-related changes, too.
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
      - '.travis.yml'
  # We also run tests on pull requests targeted at the master branch.
  pull_request:
    branches: master
    paths-ignore:
      - '**/*.md'
      - 'site/**'
      - 'netlify.toml'
      - '.travis.yml'
  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.
  # For example, you can try to build a branch without raising a pull request.
  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

jobs:
  test:
    name: "Run unit tests (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90  # instead of 360 by default

    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            # Until GHA allows a cygwin runner, we have to override the default bash
            shell: C:\tools\cygwin\bin\bash.exe --login -o errexit -o nounset -o pipefail -o igncr -i {0}

    defaults:
      run:
        shell: ${{ matrix.shell || 'bash' }}

    steps:
      # This sets up the environment we need for Windows, but isn't in the default image:
      #  * install make and cygwin's bash which resolves paths correctly for .bingo/Variables.mk
      #  * configure git so line-feeds don't trip lint https://github.com/actions/checkout/issues/135
      #
      # Note: We don't need to install anything here (ex wixtoolset):
      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
      - name: "Pre-configure (Windows)"
        if: runner.os == 'Windows'
        run: |
          choco install -y --no-progress --source cygwin make bash
          git config --global core.autocrlf input
          git config --global core.eol lf
        shell: bash

      - name: "Checkout"
        uses: actions/checkout@v2

      # The current working directory is lost when we run cygwin-bash in Windows.
      # This ensures each new `run:` has the correct directory, and that it is correctly translated.
      - name: "Ensure working directory (Windows)"
        if: runner.os == 'Windows'
        run: printf 'cd %s' "$(cygpath '${{ github.workspace }}')" >> ~/.bashrc

      - name: "Install Go"
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Cache golang"
        uses: actions/cache@v2
        with:
          path: |  # TODO: go build cache if we care, noting it is OS-specific
            ~/go/pkg/mod
            ~/go/bin/*-v*
          # '.bingo/*.sum' files generate inconsistently when building `~/go/bin/*-v*`. We key '.bingo/*.mod' instead.
          key: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('go.sum', '.bingo/*.mod') }}
          restore-keys: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: "Cache Envoy binaries"
        uses: actions/cache@v2
        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall
          path: ~/.func-e/versions
          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}
          restore-keys: test-${{ runner.os }}-envoy-

      - name: "Verify clean check-in"
        run: make check

      - name: "Run unit tests"
        run: make test

      - name: "Build the `func-e` binary"
        run: make bin

      - name: "Run e2e tests using the `func-e` binary"
        run: make e2e

      - name: "Generate coverage report"  # only once (not per OS)
        if: runner.os == 'Linux'
        run: make coverage

      - name: "Upload coverage report"  # only on master push and only once (not per OS)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)
