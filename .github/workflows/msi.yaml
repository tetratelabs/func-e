# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/msi.yaml
---
name: "msi"

# GOROOT_NAME resolves a GOROOT path corresponding to a major Golang release on the current runner.
# Ex. Given GOROOT_NAME=GOROOT_1_17_X64, ${!GOROOT_NAME}=/Users/runner/hostedtoolcache/go/1.17.1/x64
# See https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#environment-variables-2
env:
  GOROOT_NAME: GOROOT_1_17_X64

on:
  push:  # We run tests on non-tagged pushes to master
    tags: ''
    branches: master
    paths:
      - 'packaging/msi/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
      - 'Next.mk'
  pull_request:  # We also run tests on pull requests targeted at the master branch
    branches: master
    paths:
      - 'packaging/msi/*'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
      - 'Next.mk'
  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.
  # For example, you can try to build a branch without raising a pull request.
  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  msi:
    name: "Test Windows Installer build (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        include:
          # ubuntu is missing wixl https://github.com/actions/virtual-environments/issues/3857
          - os: ubuntu-latest
            setup: sudo apt update -qq && sudo apt install -qq -y wixl msitools osslsigncode
          # macos is missing wixl https://github.com/actions/virtual-environments/issues/3857
          - os: macos-latest
            setup: brew install -q msitools osslsigncode
          # wixtoolset isn't in the path https://github.com/wixtoolset/wix3/blob/develop/src/Setup/CoreMsi/Toolset.wxs#L87
          - os: windows-latest
            setup: |
              echo "$WIX\\bin" >> $GITHUB_PATH
              osslsigncode_version=2.2
              gh release download -R mtrojnar/osslsigncode ${osslsigncode_version} -p '*windows.zip'
              unzip -qq *.zip -d ${HOME}/osslsigncode && rm *.zip
              echo "${HOME}\\osslsigncode" >> $GITHUB_PATH

    steps:
      - name: "Setup msitools, wixtoolset, osslsigncode"
        run: ${{ matrix.setup }}
        env:  # `gh` requires auth even on public releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Checkout"
        uses: actions/checkout@v2

      # This sets the version-specific GOROOT env on macOS until actions/virtual-environments#4156
      #
      # This must happen before interpolating ${!GOROOT_NAME} on macOS
      - name: "Set GOROOT_X64 env (macOS)"
        if: runner.os == 'macOS'
        run: |  # ex GOROOT_1_17_X64 -> 1.17
          go_version=$(echo ${GOROOT_NAME//_/.}| cut -d. -f2,3)
          go_root=$(ls -d /Users/runner/hostedtoolcache/go/${go_version}*/x64|sort -n|tail -1)
          echo "${GOROOT_NAME}=${go_root}" >> $GITHUB_ENV

      - name: "Configure Go"
        run: |  # This exports variables needed to run and cache a GOROOT set with ${!GOROOT_NAME}.
          go_path=${!GOROOT_NAME}/bin
          for var in GOROOT GOCACHE GOMODCACHE; do
            echo ${var}=$(${go_path}/go env ${var}) >> $GITHUB_ENV
          done
          echo ${go_path} >> $GITHUB_PATH

      - name: "Cache Go"
        uses: actions/cache@v2
        with:
          path: |  # Cache downloaded go modules and the build cache (Makefile involves `go run`)
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
          key: test-${{ runner.os }}-${{ env.GOROOT_NAME }}-go-${{ hashFiles('go.sum', 'Makefile') }}
          restore-keys: test-${{ runner.os }}-${{ env.GOROOT_NAME }}-go-

      - name: "Build Windows Installer (MSI)"
        run: make dist

      # This only checks the installer when built on Windows as it is simpler than switching OS.
      # refreshenv is from choco, and lets you reload ENV variables (used here for PATH).
      - name: "Test Windows Installer (Windows)"
        if: runner.os == 'Windows'
        run: call packaging\msi\verify_msi.cmd
        shell: cmd

      # This tests the manifest via yamllint because validation via winget requires too much setup.
      # See https://github.com/microsoft/winget-cli/issues/754#issuecomment-896475895
      - name: "Test winget manifest generation"
        run: |
          ./packaging/msi/winget_manifest.sh > Tetrate.func-e.yaml
          yamllint -sd '{extends: default, rules: {line-length: disable}}' Tetrate.func-e.yaml
