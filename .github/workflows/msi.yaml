# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/msi.yaml
---
name: "msi"

env:  # As of 2021-08-05 images come with go 1.15 https://github.com/actions/virtual-environments/tree/main/images
  GO_VERSION: "1.16.6"

on:
  push:  # We run tests on non-tagged pushes to master
    tags: ''
    branches: master
    paths:
      - 'packaging/func-e.wxs'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
  pull_request:  # We also run tests on pull requests targeted at the master branch
    branches: master
    paths:
      - 'packaging/func-e.wxs'
      - 'packaging/icon@48w.ico'
      - '.github/workflows/msi.yaml'
  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.
  # For example, you can try to build a branch without raising a pull request.
  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow
  workflow_dispatch:

defaults:
  run:  # use bash for all operating systems unless overridden
    shell: bash

jobs:
  msi:
    name: "Test Windows Installer build (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # don't fail fast as sometimes failures are operating system specific
      matrix:
        include:
          # ubuntu is missing wixl https://github.com/actions/virtual-environments/issues/3857
          - os: ubuntu-latest
            setup: sudo apt update -qq && sudo apt install -qq -y wixl
          # macos is missing wixl https://github.com/actions/virtual-environments/issues/3857
          - os: macos-latest
            setup: brew install -q msitools
          # wixtoolset isn't in the path https://github.com/wixtoolset/wix3/blob/develop/src/Setup/CoreMsi/Toolset.wxs#L87
          - os: windows-latest
            setup: echo "$WIX\\bin" >> $GITHUB_PATH

    steps:
      - name: "Setup msitools/wixtoolset"
        run: ${{ matrix.setup }}

      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install Go"
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: "Cache golang"
        uses: actions/cache@v2
        with:
          path: |  # TODO: go build cache if we care, noting it is OS-specific
            ~/go/pkg/mod
            ~/go/bin/*-v*
          # '.bingo/*.sum' files generate inconsistently when building `~/go/bin/*-v*`. We key '.bingo/*.mod' instead.
          key: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('go.sum', '.bingo/*.mod') }}
          restore-keys: test-${{ runner.os }}-${{ env.GO_VERSION }}-go-

      # Check that we can build a Windows installer. While this is cross-platforms, only the
      # Windows runner will test it. This saves us from having to launch 2 more runners.
      - name: "Build Windows Installer (MSI)"
        run: make msi

      # This only checks the installer when built on Windows as it is simpler than switching OS.
      # refreshenv is from choco, and lets you reload ENV variables (used here for PATH).
      - name: "Test Windows Installer (Windows)"
        if: runner.os == 'Windows'
        run: | # install, try something, uninstall
          msiexec /i dist\func-e_windows_amd64\func-e.msi /qn
          refreshenv
          func-e -version
          msiexec /x dist\func-e_windows_amd64\func-e.msi /qn
          func-e -version && exit 1
        shell: cmd
