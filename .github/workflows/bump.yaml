# `name` value will appear "as is" in the badge.
# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository
# yamllint --format github .github/workflows/bump.yaml
---
name: bump

# This workflow is for external packages, and is only triggered once ("released").
# This centralizes workflows that are hard to undo, such as reversing PRs that update packages.
#
# One trade-off of deferring to "released" is that release notes will refer to packages not yet
# available. For example, homebrew raises a PR that needs to be merged, usually a day later.
#
# See https://docs.github.com/en/actions/reference/events-that-trigger-workflows?query=release+released+event#release
# See https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release
on:
  release:
    types:  # This triggers when a release is published, or a pre-release is changed to a release
      - released

# These pull requests create pull requests against a remote repository. This implies the following:
#  1. Create TOKEN with "public_repo" scope https://github.com/settings/tokens
#  2. Assign that as PACKAGE_BUMP_TOKEN https://github.com/organizations/tetratelabs/settings/secrets/actions/new
#
# To ensure PRs appear non-personal, use an org-specific name and the noreply email of tetratelabs
# Ex. curl -s https://api.github.com/users/tetratelabs|jq '.id, .login'
env:
  GIT_USER_NAME: Tetrate Labs CI
  GIT_USER_EMAIL: 38483186+tetratelabs@users.noreply.github.com
  GIT_COMMITTER: Tetrate Labs CI <38483186+tetratelabs@users.noreply.github.com>

jobs:
  homebrew:
    name: "Homebrew/homebrew-core"
    runs-on: ubuntu-20.04  # Hard-coding an LTS means maintenance, but only once each 2 years!
    steps:
      - name: "Configure git"
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

      - name: "Bump Formula PR"
        # Same as: brew bump-formula-pr --no-browse --no-audit --version "${version}" func-e
        uses: mislav/bump-homebrew-formula-action@v1
        with:
          formula-name: func-e
        env:  # See env section for notes on PACKAGE_BUMP_TOKEN
          COMMITTER_TOKEN: ${{ secrets.PACKAGE_BUMP_TOKEN }}

  # This job downloads the func-e.msi from the corresponding release. It extracts properties from
  # it in order to create a winget package manifest. Finally, it creates a pull request to add the
  # new version. The pull request is a branch on tetratelabs/winget-pkgs so that anyone on the team
  # can edit it as necessary.
  msi:
    name: "microsoft/winget-create"
    runs-on: ubuntu-20.04  # Hard-coding an LTS means maintenance, but only once each 2 years!

    steps:
      # ubuntu is missing msitools https://github.com/actions/virtual-environments/issues/3857
      - name: "Install GNOME msitools"
        run: sudo apt update -qq && sudo apt install -qq -y msitools

      - name: "Checkout func-e"
        uses: actions/checkout@v2
        with:
          path: func-e

      - name: "Checkout winget-pkgs"
        uses: actions/checkout@v2
        with:
          repository: microsoft/winget-pkgs
          ref: master
          path: winget-pkgs

      - name: "Write winget manifest"
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          version=${tag#v}
          echo "MSI_VERSION=${version}" >> $GITHUB_ENV
          cd func-e
          gh release download "${tag}" -p '*windows_amd64.msi'
          manifest_path=../winget-pkgs/manifests/t/Tetrate/func-e/${version}/Tetrate.func-e.yaml
          mkdir -p $(dirname ${manifest_path})
          ./packaging/msi/winget_manifest.sh ${version} *windows_amd64.msi > ${manifest_path}
        env:  # See env section for notes on PACKAGE_BUMP_TOKEN
          GITHUB_TOKEN: ${{ secrets.PACKAGE_BUMP_TOKEN }}

      - name: "Create winget-pkgs pull request"
        uses: peter-evans/create-pull-request@v3
        id: winget-pkgs-pr
        with:
          path: winget-pkgs
          branch: func-e-${{ env.MSI_VERSION }}
          delete-branch: true
          push-to-fork: tetratelabs/winget-pkgs
          commit-message: "New version: Tetrate.func-e version ${{ env.MSI_VERSION }}"
          committer: ${{ env.GIT_COMMITTER }}
          author: ${{ env.GIT_COMMITTER }}
          title: "New version: Tetrate.func-e version ${{ env.MSI_VERSION }}"
          body: |
            - [x] Have you signed the [Contributor License Agreement](https://cla.opensource.microsoft.com/microsoft/winget-pkgs)?
            - [x] Have you checked that there aren't other open [pull requests](https://github.com/microsoft/winget-pkgs/pulls) for the same manifest update/change?
            - [x] Have you validated your manifest locally with `winget validate --manifest <path>`?
            - [x] Have you tested your manifest locally with `winget install --manifest <path>`?
            - [x] Does your manifest conform to the [1.0 schema](https://github.com/microsoft/winget-cli/blob/master/doc/ManifestSpecv1.0.md)?
          token: ${{ secrets.PACKAGE_BUMP_TOKEN }}

      - name: "Echo winget-pkgs pull request"
        run: |
          echo ${{ steps.winget-pkgs-pr.outputs.pull-request-url }}
